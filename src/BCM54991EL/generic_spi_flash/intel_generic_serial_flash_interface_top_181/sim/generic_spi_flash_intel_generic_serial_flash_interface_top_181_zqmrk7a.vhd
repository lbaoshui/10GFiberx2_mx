-- generic_spi_flash_intel_generic_serial_flash_interface_top_181_zqmrk7a.vhd

-- This file was auto-generated from intel_generic_serial_flash_interface_top_hw.tcl.  If you edit it your changes
-- will probably be lost.
-- 
-- Generated using ACDS version 18.1 222

library IEEE;
library intel_generic_serial_flash_interface_csr_181;
library intel_generic_serial_flash_interface_xip_181;
library intel_generic_serial_flash_interface_addr_181;
library altera_merlin_demultiplexer_181;
library altera_merlin_multiplexer_181;
library intel_generic_serial_flash_interface_cmd_181;
library intel_generic_serial_flash_interface_if_ctrl_181;
library altera_reset_controller_181;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity generic_spi_flash_intel_generic_serial_flash_interface_top_181_zqmrk7a is
	generic (
		DEVICE_FAMILY : string  := "Arria 10";
		CHIP_SELS     : integer := 1
	);
	port (
		avl_csr_address       : in  std_logic_vector(5 downto 0)  := (others => '0'); -- avl_csr.address
		avl_csr_read          : in  std_logic                     := '0';             --        .read
		avl_csr_readdata      : out std_logic_vector(31 downto 0);                    --        .readdata
		avl_csr_write         : in  std_logic                     := '0';             --        .write
		avl_csr_writedata     : in  std_logic_vector(31 downto 0) := (others => '0'); --        .writedata
		avl_csr_waitrequest   : out std_logic;                                        --        .waitrequest
		avl_csr_readdatavalid : out std_logic;                                        --        .readdatavalid
		avl_mem_write         : in  std_logic                     := '0';             -- avl_mem.write
		avl_mem_burstcount    : in  std_logic_vector(6 downto 0)  := (others => '0'); --        .burstcount
		avl_mem_waitrequest   : out std_logic;                                        --        .waitrequest
		avl_mem_read          : in  std_logic                     := '0';             --        .read
		avl_mem_address       : in  std_logic_vector(22 downto 0) := (others => '0'); --        .address
		avl_mem_writedata     : in  std_logic_vector(31 downto 0) := (others => '0'); --        .writedata
		avl_mem_readdata      : out std_logic_vector(31 downto 0);                    --        .readdata
		avl_mem_readdatavalid : out std_logic;                                        --        .readdatavalid
		avl_mem_byteenable    : in  std_logic_vector(3 downto 0)  := (others => '0'); --        .byteenable
		clk_clk               : in  std_logic                     := '0';             --     clk.clk
		reset_reset           : in  std_logic                     := '0'              --   reset.reset
	);
end entity generic_spi_flash_intel_generic_serial_flash_interface_top_181_zqmrk7a;

architecture rtl of generic_spi_flash_intel_generic_serial_flash_interface_top_181_zqmrk7a is
	component intel_generic_serial_flash_interface_csr_cmp is
		generic (
			ADD_W               : integer                       := 6;
			CHIP_SELECT_BYPASS  : boolean                       := true;
			DEFAULT_VALUE_REG_0 : std_logic_vector(31 downto 0) := "00000000000000000000000100000001";
			DEFAULT_VALUE_REG_1 : std_logic_vector(31 downto 0) := "00000000000000000000000000000011";
			DEFAULT_VALUE_REG_2 : std_logic_vector(31 downto 0) := "00000000000000000000000000000000";
			DEFAULT_VALUE_REG_3 : std_logic_vector(31 downto 0) := "00000000000000000000000000000000";
			DEFAULT_VALUE_REG_4 : std_logic_vector(31 downto 0) := "00000000000000000000000000000000";
			DEFAULT_VALUE_REG_5 : std_logic_vector(31 downto 0) := "00000000000000000000000000000011";
			DEFAULT_VALUE_REG_6 : std_logic_vector(31 downto 0) := "00000000000000000111000000000010";
			DEFAULT_VALUE_REG_7 : std_logic_vector(31 downto 0) := "00000000000000000001100000000101"
		);
		port (
			csr_addr           : in  std_logic_vector(5 downto 0)  := (others => 'X'); -- address
			csr_rd             : in  std_logic                     := 'X';             -- read
			csr_rddata         : out std_logic_vector(31 downto 0);                    -- readdata
			csr_wr             : in  std_logic                     := 'X';             -- write
			csr_wrdata         : in  std_logic_vector(31 downto 0) := (others => 'X'); -- writedata
			csr_waitrequest    : out std_logic;                                        -- waitrequest
			csr_rddatavalid    : out std_logic;                                        -- readdatavalid
			clk                : in  std_logic                     := 'X';             -- clk
			reset              : in  std_logic                     := 'X';             -- reset
			cmd_channel        : out std_logic_vector(1 downto 0);                     -- channel
			cmd_eop            : out std_logic;                                        -- endofpacket
			cmd_ready          : in  std_logic                     := 'X';             -- ready
			cmd_sop            : out std_logic;                                        -- startofpacket
			cmd_data           : out std_logic_vector(31 downto 0);                    -- data
			cmd_valid          : out std_logic;                                        -- valid
			rsp_channel        : in  std_logic_vector(1 downto 0)  := (others => 'X'); -- channel
			rsp_data           : in  std_logic_vector(31 downto 0) := (others => 'X'); -- data
			rsp_eop            : in  std_logic                     := 'X';             -- endofpacket
			rsp_ready          : out std_logic;                                        -- ready
			rsp_sop            : in  std_logic                     := 'X';             -- startofpacket
			rsp_valid          : in  std_logic                     := 'X';             -- valid
			addr_bytes_csr     : out std_logic_vector(31 downto 0);                    -- addr_bytes_csr
			qspi_interface_en  : out std_logic;                                        -- qspi_interface_en
			op_type            : out std_logic_vector(1 downto 0);                     -- op_type
			wr_addr_type       : out std_logic_vector(1 downto 0);                     -- wr_addr_type
			wr_data_type       : out std_logic_vector(1 downto 0);                     -- wr_data_type
			rd_addr_type       : out std_logic_vector(1 downto 0);                     -- rd_addr_type
			rd_data_type       : out std_logic_vector(1 downto 0);                     -- rd_data_type
			wr_en_opcode       : out std_logic_vector(7 downto 0);                     -- wr_en_opcode
			polling_opcode     : out std_logic_vector(7 downto 0);                     -- polling_opcode
			polling_bit        : out std_logic_vector(2 downto 0);                     -- polling_bit
			wr_opcode          : out std_logic_vector(7 downto 0);                     -- wr_opcode
			rd_opcode          : out std_logic_vector(7 downto 0);                     -- rd_opcode
			rd_dummy_cycles    : out std_logic_vector(4 downto 0);                     -- rd_dummy_cycles
			is_4bytes_addr_xip : out std_logic;                                        -- is_4bytes_addr_xip
			baud_rate_divisor  : out std_logic_vector(4 downto 0);                     -- baud_rate_divisor
			cs_delay_setting   : out std_logic_vector(7 downto 0);                     -- cs_delay_setting
			read_capture_delay : out std_logic_vector(3 downto 0);                     -- read_capture_delay
			chip_select        : out std_logic_vector(3 downto 0);                     -- chip_select
			in_chip_select     : in  std_logic_vector(3 downto 0)  := (others => 'X')  -- in_chip_select
		);
	end component intel_generic_serial_flash_interface_csr_cmp;

	component generic_spi_flash_intel_generic_serial_flash_interface_xip_181_mdszy4q_cmp is
		generic (
			ADDR_WIDTH : integer := 32
		);
		port (
			clk                : in  std_logic                               := 'X';             -- clk
			reset              : in  std_logic                               := 'X';             -- reset
			mem_addr           : in  std_logic_vector(ADDR_WIDTH-1 downto 0) := (others => 'X'); -- address
			mem_rd             : in  std_logic                               := 'X';             -- read
			mem_rddata         : out std_logic_vector(31 downto 0);                              -- readdata
			mem_wr             : in  std_logic                               := 'X';             -- write
			mem_wrdata         : in  std_logic_vector(31 downto 0)           := (others => 'X'); -- writedata
			mem_byteenable     : in  std_logic_vector(3 downto 0)            := (others => 'X'); -- byteenable
			mem_burstcount     : in  std_logic_vector(6 downto 0)            := (others => 'X'); -- burstcount
			mem_waitrequest    : out std_logic;                                                  -- waitrequest
			mem_rddatavalid    : out std_logic;                                                  -- readdatavalid
			addr_bytes_xip     : out std_logic_vector(31 downto 0);                              -- addr_bytes_xip
			cmd_channel        : out std_logic_vector(1 downto 0);                               -- channel
			cmd_eop            : out std_logic;                                                  -- endofpacket
			cmd_ready          : in  std_logic                               := 'X';             -- ready
			cmd_sop            : out std_logic;                                                  -- startofpacket
			cmd_data           : out std_logic_vector(31 downto 0);                              -- data
			cmd_valid          : out std_logic;                                                  -- valid
			rsp_channel        : in  std_logic_vector(1 downto 0)            := (others => 'X'); -- channel
			rsp_data           : in  std_logic_vector(31 downto 0)           := (others => 'X'); -- data
			rsp_eop            : in  std_logic                               := 'X';             -- endofpacket
			rsp_ready          : out std_logic;                                                  -- ready
			rsp_sop            : in  std_logic                               := 'X';             -- startofpacket
			rsp_valid          : in  std_logic                               := 'X';             -- valid
			wr_en_opcode       : in  std_logic_vector(7 downto 0)            := (others => 'X'); -- wr_en_opcode
			polling_opcode     : in  std_logic_vector(7 downto 0)            := (others => 'X'); -- polling_opcode
			polling_bit        : in  std_logic_vector(2 downto 0)            := (others => 'X'); -- polling_bit
			wr_opcode          : in  std_logic_vector(7 downto 0)            := (others => 'X'); -- wr_opcode
			rd_opcode          : in  std_logic_vector(7 downto 0)            := (others => 'X'); -- rd_opcode
			rd_dummy_cycles    : in  std_logic_vector(4 downto 0)            := (others => 'X'); -- rd_dummy_cycles
			xip_trans_type     : out std_logic_vector(1 downto 0);                               -- xip_trans_type
			is_4bytes_addr_xip : in  std_logic                               := 'X';             -- is_4bytes_addr_xip
			chip_select        : in  std_logic_vector(3 downto 0)            := (others => 'X')  -- chip_select
		);
	end component generic_spi_flash_intel_generic_serial_flash_interface_xip_181_mdszy4q_cmp;

	component intel_generic_serial_flash_interface_addr_cmp is
		generic (
			ADDR_WIDTH : integer := 19
		);
		port (
			clk                       : in  std_logic                               := 'X';             -- clk
			reset                     : in  std_logic                               := 'X';             -- reset
			avl_mem_write             : in  std_logic                               := 'X';             -- write
			avl_mem_burstcount        : in  std_logic_vector(6 downto 0)            := (others => 'X'); -- burstcount
			avl_mem_waitrequest       : out std_logic;                                                  -- waitrequest
			avl_mem_read              : in  std_logic                               := 'X';             -- read
			avl_mem_addr              : in  std_logic_vector(ADDR_WIDTH-1 downto 0) := (others => 'X'); -- address
			avl_mem_wrdata            : in  std_logic_vector(31 downto 0)           := (others => 'X'); -- writedata
			avl_mem_rddata            : out std_logic_vector(31 downto 0);                              -- readdata
			avl_mem_rddata_valid      : out std_logic;                                                  -- readdatavalid
			avl_mem_byteenable        : in  std_logic_vector(3 downto 0)            := (others => 'X'); -- byteenable
			gen_qspi_mem_addr         : out std_logic_vector(31 downto 0);                              -- address
			gen_qspi_mem_read         : out std_logic;                                                  -- read
			gen_qspi_mem_rddata       : in  std_logic_vector(31 downto 0)           := (others => 'X'); -- readdata
			gen_qspi_mem_write        : out std_logic;                                                  -- write
			gen_qspi_mem_wrdata       : out std_logic_vector(31 downto 0);                              -- writedata
			gen_qspi_mem_byteenable   : out std_logic_vector(3 downto 0);                               -- byteenable
			gen_qspi_mem_burstcount   : out std_logic_vector(6 downto 0);                               -- burstcount
			gen_qspi_mem_waitrequest  : in  std_logic                               := 'X';             -- waitrequest
			gen_qspi_mem_rddata_valid : in  std_logic                               := 'X'              -- readdatavalid
		);
	end component intel_generic_serial_flash_interface_addr_cmp;

	component generic_spi_flash_altera_merlin_demultiplexer_181_hnib7fa_cmp is
		port (
			clk                : in  std_logic                     := 'X';             -- clk
			reset              : in  std_logic                     := 'X';             -- reset
			sink_ready         : out std_logic;                                        -- ready
			sink_channel       : in  std_logic_vector(1 downto 0)  := (others => 'X'); -- channel
			sink_data          : in  std_logic_vector(31 downto 0) := (others => 'X'); -- data
			sink_startofpacket : in  std_logic                     := 'X';             -- startofpacket
			sink_endofpacket   : in  std_logic                     := 'X';             -- endofpacket
			sink_valid         : in  std_logic_vector(0 downto 0)  := (others => 'X'); -- valid
			src0_ready         : in  std_logic                     := 'X';             -- ready
			src0_valid         : out std_logic;                                        -- valid
			src0_data          : out std_logic_vector(31 downto 0);                    -- data
			src0_channel       : out std_logic_vector(1 downto 0);                     -- channel
			src0_startofpacket : out std_logic;                                        -- startofpacket
			src0_endofpacket   : out std_logic;                                        -- endofpacket
			src1_ready         : in  std_logic                     := 'X';             -- ready
			src1_valid         : out std_logic;                                        -- valid
			src1_data          : out std_logic_vector(31 downto 0);                    -- data
			src1_channel       : out std_logic_vector(1 downto 0);                     -- channel
			src1_startofpacket : out std_logic;                                        -- startofpacket
			src1_endofpacket   : out std_logic                                         -- endofpacket
		);
	end component generic_spi_flash_altera_merlin_demultiplexer_181_hnib7fa_cmp;

	component generic_spi_flash_altera_merlin_multiplexer_181_x7wtypi_cmp is
		port (
			clk                 : in  std_logic                     := 'X';             -- clk
			reset               : in  std_logic                     := 'X';             -- reset
			src_ready           : in  std_logic                     := 'X';             -- ready
			src_valid           : out std_logic;                                        -- valid
			src_data            : out std_logic_vector(31 downto 0);                    -- data
			src_channel         : out std_logic_vector(1 downto 0);                     -- channel
			src_startofpacket   : out std_logic;                                        -- startofpacket
			src_endofpacket     : out std_logic;                                        -- endofpacket
			sink0_ready         : out std_logic;                                        -- ready
			sink0_valid         : in  std_logic                     := 'X';             -- valid
			sink0_channel       : in  std_logic_vector(1 downto 0)  := (others => 'X'); -- channel
			sink0_data          : in  std_logic_vector(31 downto 0) := (others => 'X'); -- data
			sink0_startofpacket : in  std_logic                     := 'X';             -- startofpacket
			sink0_endofpacket   : in  std_logic                     := 'X';             -- endofpacket
			sink1_ready         : out std_logic;                                        -- ready
			sink1_valid         : in  std_logic                     := 'X';             -- valid
			sink1_channel       : in  std_logic_vector(1 downto 0)  := (others => 'X'); -- channel
			sink1_data          : in  std_logic_vector(31 downto 0) := (others => 'X'); -- data
			sink1_startofpacket : in  std_logic                     := 'X';             -- startofpacket
			sink1_endofpacket   : in  std_logic                     := 'X'              -- endofpacket
		);
	end component generic_spi_flash_altera_merlin_multiplexer_181_x7wtypi_cmp;

	component intel_generic_serial_flash_interface_cmd_cmp is
		port (
			clk             : in  std_logic                     := 'X';             -- clk
			reset           : in  std_logic                     := 'X';             -- reset
			in_cmd_channel  : in  std_logic_vector(1 downto 0)  := (others => 'X'); -- channel
			in_cmd_eop      : in  std_logic                     := 'X';             -- endofpacket
			in_cmd_ready    : out std_logic;                                        -- ready
			in_cmd_sop      : in  std_logic                     := 'X';             -- startofpacket
			in_cmd_data     : in  std_logic_vector(31 downto 0) := (others => 'X'); -- data
			in_cmd_valid    : in  std_logic                     := 'X';             -- valid
			out_cmd_channel : out std_logic_vector(8 downto 0);                     -- channel
			out_cmd_eop     : out std_logic;                                        -- endofpacket
			out_cmd_ready   : in  std_logic                     := 'X';             -- ready
			out_cmd_sop     : out std_logic;                                        -- startofpacket
			out_cmd_data    : out std_logic_vector(7 downto 0);                     -- data
			out_cmd_valid   : out std_logic;                                        -- valid
			in_rsp_data     : in  std_logic_vector(7 downto 0)  := (others => 'X'); -- data
			in_rsp_ready    : out std_logic;                                        -- ready
			in_rsp_valid    : in  std_logic                     := 'X';             -- valid
			out_rsp_channel : out std_logic_vector(1 downto 0);                     -- channel
			out_rsp_data    : out std_logic_vector(31 downto 0);                    -- data
			out_rsp_eop     : out std_logic;                                        -- endofpacket
			out_rsp_ready   : in  std_logic                     := 'X';             -- ready
			out_rsp_sop     : out std_logic;                                        -- startofpacket
			out_rsp_valid   : out std_logic;                                        -- valid
			addr_bytes_csr  : in  std_logic_vector(31 downto 0) := (others => 'X'); -- addr_bytes_csr
			addr_bytes_xip  : in  std_logic_vector(31 downto 0) := (others => 'X'); -- addr_bytes_xip
			dummy_cycles    : out std_logic_vector(4 downto 0);                     -- dummy_cycles
			chip_select     : out std_logic_vector(3 downto 0);                     -- chip_select
			require_rdata   : out std_logic;                                        -- require_rdata
			op_type         : in  std_logic_vector(1 downto 0)  := (others => 'X'); -- op_type
			wr_addr_type    : in  std_logic_vector(1 downto 0)  := (others => 'X'); -- wr_addr_type
			wr_data_type    : in  std_logic_vector(1 downto 0)  := (others => 'X'); -- wr_data_type
			rd_addr_type    : in  std_logic_vector(1 downto 0)  := (others => 'X'); -- rd_addr_type
			rd_data_type    : in  std_logic_vector(1 downto 0)  := (others => 'X'); -- rd_data_type
			op_num_lines    : out std_logic_vector(3 downto 0);                     -- op_num_lines
			addr_num_lines  : out std_logic_vector(3 downto 0);                     -- addr_num_lines
			data_num_lines  : out std_logic_vector(3 downto 0);                     -- data_num_lines
			xip_trans_type  : in  std_logic_vector(1 downto 0)  := (others => 'X')  -- xip_trans_type
		);
	end component intel_generic_serial_flash_interface_cmd_cmp;

	component generic_spi_flash_intel_generic_serial_flash_interface_if_ctrl_181_kygc6zi_cmp is
		generic (
			DEV_FAMILY       : string  := "Arria 10";
			NCS_LENGTH       : integer := 3;
			DATA_LENGTH      : integer := 4;
			MODE_LENGTH      : integer := 1;
			ENABLE_SIM_MODEL : string  := "false"
		);
		port (
			clk                : in  std_logic                    := 'X';             -- clk
			reset              : in  std_logic                    := 'X';             -- reset
			in_cmd_channel     : in  std_logic_vector(8 downto 0) := (others => 'X'); -- channel
			in_cmd_eop         : in  std_logic                    := 'X';             -- endofpacket
			in_cmd_ready       : out std_logic;                                       -- ready
			in_cmd_sop         : in  std_logic                    := 'X';             -- startofpacket
			in_cmd_data        : in  std_logic_vector(7 downto 0) := (others => 'X'); -- data
			in_cmd_valid       : in  std_logic                    := 'X';             -- valid
			out_rsp_data       : out std_logic_vector(7 downto 0);                    -- data
			out_rsp_valid      : out std_logic;                                       -- valid
			out_rsp_ready      : in  std_logic                    := 'X';             -- ready
			dummy_cycles       : in  std_logic_vector(4 downto 0) := (others => 'X'); -- dummy_cycles
			chip_select        : in  std_logic_vector(3 downto 0) := (others => 'X'); -- chip_select
			qspi_interface_en  : in  std_logic                    := 'X';             -- qspi_interface_en
			require_rdata      : in  std_logic                    := 'X';             -- require_rdata
			op_num_lines       : in  std_logic_vector(3 downto 0) := (others => 'X'); -- op_num_lines
			addr_num_lines     : in  std_logic_vector(3 downto 0) := (others => 'X'); -- addr_num_lines
			data_num_lines     : in  std_logic_vector(3 downto 0) := (others => 'X'); -- data_num_lines
			baud_rate_divisor  : in  std_logic_vector(4 downto 0) := (others => 'X'); -- baud_rate_divisor
			cs_delay_setting   : in  std_logic_vector(7 downto 0) := (others => 'X'); -- cs_delay_setting
			read_capture_delay : in  std_logic_vector(3 downto 0) := (others => 'X')  -- read_capture_delay
		);
	end component generic_spi_flash_intel_generic_serial_flash_interface_if_ctrl_181_kygc6zi_cmp;

	component altera_reset_controller_cmp is
		generic (
			NUM_RESET_INPUTS          : integer := 6;
			OUTPUT_RESET_SYNC_EDGES   : string  := "deassert";
			SYNC_DEPTH                : integer := 2;
			RESET_REQUEST_PRESENT     : integer := 0;
			RESET_REQ_WAIT_TIME       : integer := 1;
			MIN_RST_ASSERTION_TIME    : integer := 3;
			RESET_REQ_EARLY_DSRT_TIME : integer := 1;
			USE_RESET_REQUEST_IN0     : integer := 0;
			USE_RESET_REQUEST_IN1     : integer := 0;
			USE_RESET_REQUEST_IN2     : integer := 0;
			USE_RESET_REQUEST_IN3     : integer := 0;
			USE_RESET_REQUEST_IN4     : integer := 0;
			USE_RESET_REQUEST_IN5     : integer := 0;
			USE_RESET_REQUEST_IN6     : integer := 0;
			USE_RESET_REQUEST_IN7     : integer := 0;
			USE_RESET_REQUEST_IN8     : integer := 0;
			USE_RESET_REQUEST_IN9     : integer := 0;
			USE_RESET_REQUEST_IN10    : integer := 0;
			USE_RESET_REQUEST_IN11    : integer := 0;
			USE_RESET_REQUEST_IN12    : integer := 0;
			USE_RESET_REQUEST_IN13    : integer := 0;
			USE_RESET_REQUEST_IN14    : integer := 0;
			USE_RESET_REQUEST_IN15    : integer := 0;
			ADAPT_RESET_REQUEST       : integer := 0
		);
		port (
			reset_in0      : in  std_logic := 'X'; -- reset
			clk            : in  std_logic := 'X'; -- clk
			reset_out      : out std_logic;        -- reset
			reset_req      : out std_logic;        -- reset_req
			reset_req_in0  : in  std_logic := 'X'; -- reset_req
			reset_in1      : in  std_logic := 'X'; -- reset
			reset_req_in1  : in  std_logic := 'X'; -- reset_req
			reset_in2      : in  std_logic := 'X'; -- reset
			reset_req_in2  : in  std_logic := 'X'; -- reset_req
			reset_in3      : in  std_logic := 'X'; -- reset
			reset_req_in3  : in  std_logic := 'X'; -- reset_req
			reset_in4      : in  std_logic := 'X'; -- reset
			reset_req_in4  : in  std_logic := 'X'; -- reset_req
			reset_in5      : in  std_logic := 'X'; -- reset
			reset_req_in5  : in  std_logic := 'X'; -- reset_req
			reset_in6      : in  std_logic := 'X'; -- reset
			reset_req_in6  : in  std_logic := 'X'; -- reset_req
			reset_in7      : in  std_logic := 'X'; -- reset
			reset_req_in7  : in  std_logic := 'X'; -- reset_req
			reset_in8      : in  std_logic := 'X'; -- reset
			reset_req_in8  : in  std_logic := 'X'; -- reset_req
			reset_in9      : in  std_logic := 'X'; -- reset
			reset_req_in9  : in  std_logic := 'X'; -- reset_req
			reset_in10     : in  std_logic := 'X'; -- reset
			reset_req_in10 : in  std_logic := 'X'; -- reset_req
			reset_in11     : in  std_logic := 'X'; -- reset
			reset_req_in11 : in  std_logic := 'X'; -- reset_req
			reset_in12     : in  std_logic := 'X'; -- reset
			reset_req_in12 : in  std_logic := 'X'; -- reset_req
			reset_in13     : in  std_logic := 'X'; -- reset
			reset_req_in13 : in  std_logic := 'X'; -- reset_req
			reset_in14     : in  std_logic := 'X'; -- reset
			reset_req_in14 : in  std_logic := 'X'; -- reset_req
			reset_in15     : in  std_logic := 'X'; -- reset
			reset_req_in15 : in  std_logic := 'X'  -- reset_req
		);
	end component altera_reset_controller_cmp;

	signal csr_controller_cmd_pck_valid                                : std_logic;                     -- csr_controller:cmd_valid -> multiplexer:sink1_valid
	signal csr_controller_cmd_pck_data                                 : std_logic_vector(31 downto 0); -- csr_controller:cmd_data -> multiplexer:sink1_data
	signal csr_controller_cmd_pck_ready                                : std_logic;                     -- multiplexer:sink1_ready -> csr_controller:cmd_ready
	signal csr_controller_cmd_pck_channel                              : std_logic_vector(1 downto 0);  -- csr_controller:cmd_channel -> multiplexer:sink1_channel
	signal csr_controller_cmd_pck_startofpacket                        : std_logic;                     -- csr_controller:cmd_sop -> multiplexer:sink1_startofpacket
	signal csr_controller_cmd_pck_endofpacket                          : std_logic;                     -- csr_controller:cmd_eop -> multiplexer:sink1_endofpacket
	signal xip_controller_cmd_pck_valid                                : std_logic;                     -- xip_controller:cmd_valid -> multiplexer:sink0_valid
	signal xip_controller_cmd_pck_data                                 : std_logic_vector(31 downto 0); -- xip_controller:cmd_data -> multiplexer:sink0_data
	signal xip_controller_cmd_pck_ready                                : std_logic;                     -- multiplexer:sink0_ready -> xip_controller:cmd_ready
	signal xip_controller_cmd_pck_channel                              : std_logic_vector(1 downto 0);  -- xip_controller:cmd_channel -> multiplexer:sink0_channel
	signal xip_controller_cmd_pck_startofpacket                        : std_logic;                     -- xip_controller:cmd_sop -> multiplexer:sink0_startofpacket
	signal xip_controller_cmd_pck_endofpacket                          : std_logic;                     -- xip_controller:cmd_eop -> multiplexer:sink0_endofpacket
	signal merlin_demultiplexer_0_src1_valid                           : std_logic;                     -- merlin_demultiplexer_0:src1_valid -> csr_controller:rsp_valid
	signal merlin_demultiplexer_0_src1_data                            : std_logic_vector(31 downto 0); -- merlin_demultiplexer_0:src1_data -> csr_controller:rsp_data
	signal merlin_demultiplexer_0_src1_ready                           : std_logic;                     -- csr_controller:rsp_ready -> merlin_demultiplexer_0:src1_ready
	signal merlin_demultiplexer_0_src1_channel                         : std_logic_vector(1 downto 0);  -- merlin_demultiplexer_0:src1_channel -> csr_controller:rsp_channel
	signal merlin_demultiplexer_0_src1_startofpacket                   : std_logic;                     -- merlin_demultiplexer_0:src1_startofpacket -> csr_controller:rsp_sop
	signal merlin_demultiplexer_0_src1_endofpacket                     : std_logic;                     -- merlin_demultiplexer_0:src1_endofpacket -> csr_controller:rsp_eop
	signal merlin_demultiplexer_0_src0_valid                           : std_logic;                     -- merlin_demultiplexer_0:src0_valid -> xip_controller:rsp_valid
	signal merlin_demultiplexer_0_src0_data                            : std_logic_vector(31 downto 0); -- merlin_demultiplexer_0:src0_data -> xip_controller:rsp_data
	signal merlin_demultiplexer_0_src0_ready                           : std_logic;                     -- xip_controller:rsp_ready -> merlin_demultiplexer_0:src0_ready
	signal merlin_demultiplexer_0_src0_channel                         : std_logic_vector(1 downto 0);  -- merlin_demultiplexer_0:src0_channel -> xip_controller:rsp_channel
	signal merlin_demultiplexer_0_src0_startofpacket                   : std_logic;                     -- merlin_demultiplexer_0:src0_startofpacket -> xip_controller:rsp_sop
	signal merlin_demultiplexer_0_src0_endofpacket                     : std_logic;                     -- merlin_demultiplexer_0:src0_endofpacket -> xip_controller:rsp_eop
	signal xip_addr_adaption_gen_qspi_mem_readdata                     : std_logic_vector(31 downto 0); -- xip_controller:mem_rddata -> xip_addr_adaption:gen_qspi_mem_rddata
	signal xip_addr_adaption_gen_qspi_mem_waitrequest                  : std_logic;                     -- xip_controller:mem_waitrequest -> xip_addr_adaption:gen_qspi_mem_waitrequest
	signal xip_addr_adaption_gen_qspi_mem_address                      : std_logic_vector(31 downto 0); -- xip_addr_adaption:gen_qspi_mem_addr -> xip_controller:mem_addr
	signal xip_addr_adaption_gen_qspi_mem_read                         : std_logic;                     -- xip_addr_adaption:gen_qspi_mem_read -> xip_controller:mem_rd
	signal xip_addr_adaption_gen_qspi_mem_byteenable                   : std_logic_vector(3 downto 0);  -- xip_addr_adaption:gen_qspi_mem_byteenable -> xip_controller:mem_byteenable
	signal xip_addr_adaption_gen_qspi_mem_readdatavalid                : std_logic;                     -- xip_controller:mem_rddatavalid -> xip_addr_adaption:gen_qspi_mem_rddata_valid
	signal xip_addr_adaption_gen_qspi_mem_write                        : std_logic;                     -- xip_addr_adaption:gen_qspi_mem_write -> xip_controller:mem_wr
	signal xip_addr_adaption_gen_qspi_mem_writedata                    : std_logic_vector(31 downto 0); -- xip_addr_adaption:gen_qspi_mem_wrdata -> xip_controller:mem_wrdata
	signal xip_addr_adaption_gen_qspi_mem_burstcount                   : std_logic_vector(6 downto 0);  -- xip_addr_adaption:gen_qspi_mem_burstcount -> xip_controller:mem_burstcount
	signal csr_controller_chip_select_chip_select                      : std_logic_vector(3 downto 0);  -- csr_controller:chip_select -> xip_controller:chip_select
	signal serial_flash_inf_cmd_gen_inst_addr_num_lines_addr_num_lines : std_logic_vector(3 downto 0);  -- serial_flash_inf_cmd_gen_inst:addr_num_lines -> qspi_inf_inst:addr_num_lines
	signal serial_flash_inf_cmd_gen_inst_data_num_lines_data_num_lines : std_logic_vector(3 downto 0);  -- serial_flash_inf_cmd_gen_inst:data_num_lines -> qspi_inf_inst:data_num_lines
	signal serial_flash_inf_cmd_gen_inst_op_num_lines_op_num_lines     : std_logic_vector(3 downto 0);  -- serial_flash_inf_cmd_gen_inst:op_num_lines -> qspi_inf_inst:op_num_lines
	signal csr_controller_addr_bytes_csr_addr_bytes_csr                : std_logic_vector(31 downto 0); -- csr_controller:addr_bytes_csr -> serial_flash_inf_cmd_gen_inst:addr_bytes_csr
	signal xip_controller_addr_bytes_xip_addr_bytes_xip                : std_logic_vector(31 downto 0); -- xip_controller:addr_bytes_xip -> serial_flash_inf_cmd_gen_inst:addr_bytes_xip
	signal csr_controller_op_type_op_type                              : std_logic_vector(1 downto 0);  -- csr_controller:op_type -> serial_flash_inf_cmd_gen_inst:op_type
	signal csr_controller_wr_addr_type_wr_addr_type                    : std_logic_vector(1 downto 0);  -- csr_controller:wr_addr_type -> serial_flash_inf_cmd_gen_inst:wr_addr_type
	signal csr_controller_wr_data_type_wr_data_type                    : std_logic_vector(1 downto 0);  -- csr_controller:wr_data_type -> serial_flash_inf_cmd_gen_inst:wr_data_type
	signal csr_controller_rd_addr_type_rd_addr_type                    : std_logic_vector(1 downto 0);  -- csr_controller:rd_addr_type -> serial_flash_inf_cmd_gen_inst:rd_addr_type
	signal csr_controller_rd_data_type_rd_data_type                    : std_logic_vector(1 downto 0);  -- csr_controller:rd_data_type -> serial_flash_inf_cmd_gen_inst:rd_data_type
	signal csr_controller_wr_en_opcode_wr_en_opcode                    : std_logic_vector(7 downto 0);  -- csr_controller:wr_en_opcode -> xip_controller:wr_en_opcode
	signal csr_controller_polling_opcode_polling_opcode                : std_logic_vector(7 downto 0);  -- csr_controller:polling_opcode -> xip_controller:polling_opcode
	signal csr_controller_polling_bit_polling_bit                      : std_logic_vector(2 downto 0);  -- csr_controller:polling_bit -> xip_controller:polling_bit
	signal csr_controller_wr_opcode_wr_opcode                          : std_logic_vector(7 downto 0);  -- csr_controller:wr_opcode -> xip_controller:wr_opcode
	signal csr_controller_rd_opcode_rd_opcode                          : std_logic_vector(7 downto 0);  -- csr_controller:rd_opcode -> xip_controller:rd_opcode
	signal csr_controller_rd_dummy_cycles_rd_dummy_cycles              : std_logic_vector(4 downto 0);  -- csr_controller:rd_dummy_cycles -> xip_controller:rd_dummy_cycles
	signal csr_controller_is_4bytes_addr_xip_is_4bytes_addr_xip        : std_logic;                     -- csr_controller:is_4bytes_addr_xip -> xip_controller:is_4bytes_addr_xip
	signal csr_controller_baud_rate_divisor_baud_rate_divisor          : std_logic_vector(4 downto 0);  -- csr_controller:baud_rate_divisor -> qspi_inf_inst:baud_rate_divisor
	signal csr_controller_cs_delay_setting_cs_delay_setting            : std_logic_vector(7 downto 0);  -- csr_controller:cs_delay_setting -> qspi_inf_inst:cs_delay_setting
	signal csr_controller_read_capture_delay_read_capture_delay        : std_logic_vector(3 downto 0);  -- csr_controller:read_capture_delay -> qspi_inf_inst:read_capture_delay
	signal xip_controller_xip_trans_type_xip_trans_type                : std_logic_vector(1 downto 0);  -- xip_controller:xip_trans_type -> serial_flash_inf_cmd_gen_inst:xip_trans_type
	signal serial_flash_inf_cmd_gen_inst_out_rsp_pck_valid             : std_logic;                     -- serial_flash_inf_cmd_gen_inst:out_rsp_valid -> merlin_demultiplexer_0:sink_valid
	signal serial_flash_inf_cmd_gen_inst_out_rsp_pck_data              : std_logic_vector(31 downto 0); -- serial_flash_inf_cmd_gen_inst:out_rsp_data -> merlin_demultiplexer_0:sink_data
	signal serial_flash_inf_cmd_gen_inst_out_rsp_pck_ready             : std_logic;                     -- merlin_demultiplexer_0:sink_ready -> serial_flash_inf_cmd_gen_inst:out_rsp_ready
	signal serial_flash_inf_cmd_gen_inst_out_rsp_pck_channel           : std_logic_vector(1 downto 0);  -- serial_flash_inf_cmd_gen_inst:out_rsp_channel -> merlin_demultiplexer_0:sink_channel
	signal serial_flash_inf_cmd_gen_inst_out_rsp_pck_startofpacket     : std_logic;                     -- serial_flash_inf_cmd_gen_inst:out_rsp_sop -> merlin_demultiplexer_0:sink_startofpacket
	signal serial_flash_inf_cmd_gen_inst_out_rsp_pck_endofpacket       : std_logic;                     -- serial_flash_inf_cmd_gen_inst:out_rsp_eop -> merlin_demultiplexer_0:sink_endofpacket
	signal qspi_inf_inst_out_rsp_pck_valid                             : std_logic;                     -- qspi_inf_inst:out_rsp_valid -> serial_flash_inf_cmd_gen_inst:in_rsp_valid
	signal qspi_inf_inst_out_rsp_pck_data                              : std_logic_vector(7 downto 0);  -- qspi_inf_inst:out_rsp_data -> serial_flash_inf_cmd_gen_inst:in_rsp_data
	signal qspi_inf_inst_out_rsp_pck_ready                             : std_logic;                     -- serial_flash_inf_cmd_gen_inst:in_rsp_ready -> qspi_inf_inst:out_rsp_ready
	signal serial_flash_inf_cmd_gen_inst_dummy_cycles_dummy_cycles     : std_logic_vector(4 downto 0);  -- serial_flash_inf_cmd_gen_inst:dummy_cycles -> qspi_inf_inst:dummy_cycles
	signal serial_flash_inf_cmd_gen_inst_chip_select_chip_select       : std_logic_vector(3 downto 0);  -- serial_flash_inf_cmd_gen_inst:chip_select -> qspi_inf_inst:chip_select
	signal serial_flash_inf_cmd_gen_inst_require_rdata_require_rdata   : std_logic;                     -- serial_flash_inf_cmd_gen_inst:require_rdata -> qspi_inf_inst:require_rdata
	signal csr_controller_qspi_interface_en_qspi_interface_en          : std_logic;                     -- csr_controller:qspi_interface_en -> qspi_inf_inst:qspi_interface_en
	signal serial_flash_inf_cmd_gen_inst_out_cmd_pck_valid             : std_logic;                     -- serial_flash_inf_cmd_gen_inst:out_cmd_valid -> qspi_inf_inst:in_cmd_valid
	signal serial_flash_inf_cmd_gen_inst_out_cmd_pck_data              : std_logic_vector(7 downto 0);  -- serial_flash_inf_cmd_gen_inst:out_cmd_data -> qspi_inf_inst:in_cmd_data
	signal serial_flash_inf_cmd_gen_inst_out_cmd_pck_ready             : std_logic;                     -- qspi_inf_inst:in_cmd_ready -> serial_flash_inf_cmd_gen_inst:out_cmd_ready
	signal serial_flash_inf_cmd_gen_inst_out_cmd_pck_channel           : std_logic_vector(8 downto 0);  -- serial_flash_inf_cmd_gen_inst:out_cmd_channel -> qspi_inf_inst:in_cmd_channel
	signal serial_flash_inf_cmd_gen_inst_out_cmd_pck_startofpacket     : std_logic;                     -- serial_flash_inf_cmd_gen_inst:out_cmd_sop -> qspi_inf_inst:in_cmd_sop
	signal serial_flash_inf_cmd_gen_inst_out_cmd_pck_endofpacket       : std_logic;                     -- serial_flash_inf_cmd_gen_inst:out_cmd_eop -> qspi_inf_inst:in_cmd_eop
	signal multiplexer_src_valid                                       : std_logic;                     -- multiplexer:src_valid -> serial_flash_inf_cmd_gen_inst:in_cmd_valid
	signal multiplexer_src_data                                        : std_logic_vector(31 downto 0); -- multiplexer:src_data -> serial_flash_inf_cmd_gen_inst:in_cmd_data
	signal multiplexer_src_ready                                       : std_logic;                     -- serial_flash_inf_cmd_gen_inst:in_cmd_ready -> multiplexer:src_ready
	signal multiplexer_src_channel                                     : std_logic_vector(1 downto 0);  -- multiplexer:src_channel -> serial_flash_inf_cmd_gen_inst:in_cmd_channel
	signal multiplexer_src_startofpacket                               : std_logic;                     -- multiplexer:src_startofpacket -> serial_flash_inf_cmd_gen_inst:in_cmd_sop
	signal multiplexer_src_endofpacket                                 : std_logic;                     -- multiplexer:src_endofpacket -> serial_flash_inf_cmd_gen_inst:in_cmd_eop
	signal rst_controller_reset_out_reset                              : std_logic;                     -- rst_controller:reset_out -> [csr_controller:reset, merlin_demultiplexer_0:reset, multiplexer:reset, qspi_inf_inst:reset, serial_flash_inf_cmd_gen_inst:reset, xip_addr_adaption:reset, xip_controller:reset]

	for csr_controller : intel_generic_serial_flash_interface_csr_cmp
		use entity intel_generic_serial_flash_interface_csr_181.intel_generic_serial_flash_interface_csr;
	for xip_controller : generic_spi_flash_intel_generic_serial_flash_interface_xip_181_mdszy4q_cmp
		use entity intel_generic_serial_flash_interface_xip_181.generic_spi_flash_intel_generic_serial_flash_interface_xip_181_mdszy4q;
	for xip_addr_adaption : intel_generic_serial_flash_interface_addr_cmp
		use entity intel_generic_serial_flash_interface_addr_181.intel_generic_serial_flash_interface_addr;
	for merlin_demultiplexer_0 : generic_spi_flash_altera_merlin_demultiplexer_181_hnib7fa_cmp
		use entity altera_merlin_demultiplexer_181.generic_spi_flash_altera_merlin_demultiplexer_181_hnib7fa;
	for multiplexer : generic_spi_flash_altera_merlin_multiplexer_181_x7wtypi_cmp
		use entity altera_merlin_multiplexer_181.generic_spi_flash_altera_merlin_multiplexer_181_x7wtypi;
	for serial_flash_inf_cmd_gen_inst : intel_generic_serial_flash_interface_cmd_cmp
		use entity intel_generic_serial_flash_interface_cmd_181.intel_generic_serial_flash_interface_cmd;
	for qspi_inf_inst : generic_spi_flash_intel_generic_serial_flash_interface_if_ctrl_181_kygc6zi_cmp
		use entity intel_generic_serial_flash_interface_if_ctrl_181.generic_spi_flash_intel_generic_serial_flash_interface_if_ctrl_181_kygc6zi;
	for rst_controller : altera_reset_controller_cmp
		use entity altera_reset_controller_181.altera_reset_controller;
begin

	device_family_check : if DEVICE_FAMILY /= "Arria 10" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	chip_sels_check : if CHIP_SELS /= 1 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	csr_controller : component intel_generic_serial_flash_interface_csr_cmp
		generic map (
			ADD_W               => 6,
			CHIP_SELECT_BYPASS  => false,
			DEFAULT_VALUE_REG_0 => "00000000000000000000000000000001",
			DEFAULT_VALUE_REG_1 => "00000000000000000000000000010000",
			DEFAULT_VALUE_REG_2 => "00000000000000000000000000000000",
			DEFAULT_VALUE_REG_3 => "00000000000000000000000000000000",
			DEFAULT_VALUE_REG_4 => "00000000000000000000000000000000",
			DEFAULT_VALUE_REG_5 => "00000000000000000000000000000011",
			DEFAULT_VALUE_REG_6 => "00000000000000000111000000000010",
			DEFAULT_VALUE_REG_7 => "00000000000000000001100000000101"
		)
		port map (
			csr_addr           => avl_csr_address,                                      --                csr.address
			csr_rd             => avl_csr_read,                                         --                   .read
			csr_rddata         => avl_csr_readdata,                                     --                   .readdata
			csr_wr             => avl_csr_write,                                        --                   .write
			csr_wrdata         => avl_csr_writedata,                                    --                   .writedata
			csr_waitrequest    => avl_csr_waitrequest,                                  --                   .waitrequest
			csr_rddatavalid    => avl_csr_readdatavalid,                                --                   .readdatavalid
			clk                => clk_clk,                                              --                clk.clk
			reset              => rst_controller_reset_out_reset,                       --              reset.reset
			cmd_channel        => csr_controller_cmd_pck_channel,                       --            cmd_pck.channel
			cmd_eop            => csr_controller_cmd_pck_endofpacket,                   --                   .endofpacket
			cmd_ready          => csr_controller_cmd_pck_ready,                         --                   .ready
			cmd_sop            => csr_controller_cmd_pck_startofpacket,                 --                   .startofpacket
			cmd_data           => csr_controller_cmd_pck_data,                          --                   .data
			cmd_valid          => csr_controller_cmd_pck_valid,                         --                   .valid
			rsp_channel        => merlin_demultiplexer_0_src1_channel,                  --            rsp_pck.channel
			rsp_data           => merlin_demultiplexer_0_src1_data,                     --                   .data
			rsp_eop            => merlin_demultiplexer_0_src1_endofpacket,              --                   .endofpacket
			rsp_ready          => merlin_demultiplexer_0_src1_ready,                    --                   .ready
			rsp_sop            => merlin_demultiplexer_0_src1_startofpacket,            --                   .startofpacket
			rsp_valid          => merlin_demultiplexer_0_src1_valid,                    --                   .valid
			addr_bytes_csr     => csr_controller_addr_bytes_csr_addr_bytes_csr,         --     addr_bytes_csr.addr_bytes_csr
			qspi_interface_en  => csr_controller_qspi_interface_en_qspi_interface_en,   --  qspi_interface_en.qspi_interface_en
			op_type            => csr_controller_op_type_op_type,                       --            op_type.op_type
			wr_addr_type       => csr_controller_wr_addr_type_wr_addr_type,             --       wr_addr_type.wr_addr_type
			wr_data_type       => csr_controller_wr_data_type_wr_data_type,             --       wr_data_type.wr_data_type
			rd_addr_type       => csr_controller_rd_addr_type_rd_addr_type,             --       rd_addr_type.rd_addr_type
			rd_data_type       => csr_controller_rd_data_type_rd_data_type,             --       rd_data_type.rd_data_type
			wr_en_opcode       => csr_controller_wr_en_opcode_wr_en_opcode,             --       wr_en_opcode.wr_en_opcode
			polling_opcode     => csr_controller_polling_opcode_polling_opcode,         --     polling_opcode.polling_opcode
			polling_bit        => csr_controller_polling_bit_polling_bit,               --        polling_bit.polling_bit
			wr_opcode          => csr_controller_wr_opcode_wr_opcode,                   --          wr_opcode.wr_opcode
			rd_opcode          => csr_controller_rd_opcode_rd_opcode,                   --          rd_opcode.rd_opcode
			rd_dummy_cycles    => csr_controller_rd_dummy_cycles_rd_dummy_cycles,       --    rd_dummy_cycles.rd_dummy_cycles
			is_4bytes_addr_xip => csr_controller_is_4bytes_addr_xip_is_4bytes_addr_xip, -- is_4bytes_addr_xip.is_4bytes_addr_xip
			baud_rate_divisor  => csr_controller_baud_rate_divisor_baud_rate_divisor,   --  baud_rate_divisor.baud_rate_divisor
			cs_delay_setting   => csr_controller_cs_delay_setting_cs_delay_setting,     --   cs_delay_setting.cs_delay_setting
			read_capture_delay => csr_controller_read_capture_delay_read_capture_delay, -- read_capture_delay.read_capture_delay
			chip_select        => csr_controller_chip_select_chip_select,               --        chip_select.chip_select
			in_chip_select     => "0000"                                                --        (terminated)
		);

	xip_controller : component generic_spi_flash_intel_generic_serial_flash_interface_xip_181_mdszy4q_cmp
		generic map (
			ADDR_WIDTH => 32
		)
		port map (
			clk                => clk_clk,                                              --                clk.clk
			reset              => rst_controller_reset_out_reset,                       --              reset.reset
			mem_addr           => xip_addr_adaption_gen_qspi_mem_address,               --                mem.address
			mem_rd             => xip_addr_adaption_gen_qspi_mem_read,                  --                   .read
			mem_rddata         => xip_addr_adaption_gen_qspi_mem_readdata,              --                   .readdata
			mem_wr             => xip_addr_adaption_gen_qspi_mem_write,                 --                   .write
			mem_wrdata         => xip_addr_adaption_gen_qspi_mem_writedata,             --                   .writedata
			mem_byteenable     => xip_addr_adaption_gen_qspi_mem_byteenable,            --                   .byteenable
			mem_burstcount     => xip_addr_adaption_gen_qspi_mem_burstcount,            --                   .burstcount
			mem_waitrequest    => xip_addr_adaption_gen_qspi_mem_waitrequest,           --                   .waitrequest
			mem_rddatavalid    => xip_addr_adaption_gen_qspi_mem_readdatavalid,         --                   .readdatavalid
			addr_bytes_xip     => xip_controller_addr_bytes_xip_addr_bytes_xip,         --     addr_bytes_xip.addr_bytes_xip
			cmd_channel        => xip_controller_cmd_pck_channel,                       --            cmd_pck.channel
			cmd_eop            => xip_controller_cmd_pck_endofpacket,                   --                   .endofpacket
			cmd_ready          => xip_controller_cmd_pck_ready,                         --                   .ready
			cmd_sop            => xip_controller_cmd_pck_startofpacket,                 --                   .startofpacket
			cmd_data           => xip_controller_cmd_pck_data,                          --                   .data
			cmd_valid          => xip_controller_cmd_pck_valid,                         --                   .valid
			rsp_channel        => merlin_demultiplexer_0_src0_channel,                  --            rsp_pck.channel
			rsp_data           => merlin_demultiplexer_0_src0_data,                     --                   .data
			rsp_eop            => merlin_demultiplexer_0_src0_endofpacket,              --                   .endofpacket
			rsp_ready          => merlin_demultiplexer_0_src0_ready,                    --                   .ready
			rsp_sop            => merlin_demultiplexer_0_src0_startofpacket,            --                   .startofpacket
			rsp_valid          => merlin_demultiplexer_0_src0_valid,                    --                   .valid
			wr_en_opcode       => csr_controller_wr_en_opcode_wr_en_opcode,             --       wr_en_opcode.wr_en_opcode
			polling_opcode     => csr_controller_polling_opcode_polling_opcode,         --     polling_opcode.polling_opcode
			polling_bit        => csr_controller_polling_bit_polling_bit,               --        polling_bit.polling_bit
			wr_opcode          => csr_controller_wr_opcode_wr_opcode,                   --          wr_opcode.wr_opcode
			rd_opcode          => csr_controller_rd_opcode_rd_opcode,                   --          rd_opcode.rd_opcode
			rd_dummy_cycles    => csr_controller_rd_dummy_cycles_rd_dummy_cycles,       --    rd_dummy_cycles.rd_dummy_cycles
			xip_trans_type     => xip_controller_xip_trans_type_xip_trans_type,         --     xip_trans_type.xip_trans_type
			is_4bytes_addr_xip => csr_controller_is_4bytes_addr_xip_is_4bytes_addr_xip, -- is_4bytes_addr_xip.is_4bytes_addr_xip
			chip_select        => csr_controller_chip_select_chip_select                --        chip_select.chip_select
		);

	xip_addr_adaption : component intel_generic_serial_flash_interface_addr_cmp
		generic map (
			ADDR_WIDTH => 23
		)
		port map (
			clk                       => clk_clk,                                      --   clock_sink.clk
			reset                     => rst_controller_reset_out_reset,               --        reset.reset
			avl_mem_write             => avl_mem_write,                                --      avl_mem.write
			avl_mem_burstcount        => avl_mem_burstcount,                           --             .burstcount
			avl_mem_waitrequest       => avl_mem_waitrequest,                          --             .waitrequest
			avl_mem_read              => avl_mem_read,                                 --             .read
			avl_mem_addr              => avl_mem_address,                              --             .address
			avl_mem_wrdata            => avl_mem_writedata,                            --             .writedata
			avl_mem_rddata            => avl_mem_readdata,                             --             .readdata
			avl_mem_rddata_valid      => avl_mem_readdatavalid,                        --             .readdatavalid
			avl_mem_byteenable        => avl_mem_byteenable,                           --             .byteenable
			gen_qspi_mem_addr         => xip_addr_adaption_gen_qspi_mem_address,       -- gen_qspi_mem.address
			gen_qspi_mem_read         => xip_addr_adaption_gen_qspi_mem_read,          --             .read
			gen_qspi_mem_rddata       => xip_addr_adaption_gen_qspi_mem_readdata,      --             .readdata
			gen_qspi_mem_write        => xip_addr_adaption_gen_qspi_mem_write,         --             .write
			gen_qspi_mem_wrdata       => xip_addr_adaption_gen_qspi_mem_writedata,     --             .writedata
			gen_qspi_mem_byteenable   => xip_addr_adaption_gen_qspi_mem_byteenable,    --             .byteenable
			gen_qspi_mem_burstcount   => xip_addr_adaption_gen_qspi_mem_burstcount,    --             .burstcount
			gen_qspi_mem_waitrequest  => xip_addr_adaption_gen_qspi_mem_waitrequest,   --             .waitrequest
			gen_qspi_mem_rddata_valid => xip_addr_adaption_gen_qspi_mem_readdatavalid  --             .readdatavalid
		);

	merlin_demultiplexer_0 : component generic_spi_flash_altera_merlin_demultiplexer_181_hnib7fa_cmp
		port map (
			clk                => clk_clk,                                                 --       clk.clk
			reset              => rst_controller_reset_out_reset,                          -- clk_reset.reset
			sink_ready         => serial_flash_inf_cmd_gen_inst_out_rsp_pck_ready,         --      sink.ready
			sink_channel       => serial_flash_inf_cmd_gen_inst_out_rsp_pck_channel,       --          .channel
			sink_data          => serial_flash_inf_cmd_gen_inst_out_rsp_pck_data,          --          .data
			sink_startofpacket => serial_flash_inf_cmd_gen_inst_out_rsp_pck_startofpacket, --          .startofpacket
			sink_endofpacket   => serial_flash_inf_cmd_gen_inst_out_rsp_pck_endofpacket,   --          .endofpacket
			sink_valid(0)      => serial_flash_inf_cmd_gen_inst_out_rsp_pck_valid,         --          .valid
			src0_ready         => merlin_demultiplexer_0_src0_ready,                       --      src0.ready
			src0_valid         => merlin_demultiplexer_0_src0_valid,                       --          .valid
			src0_data          => merlin_demultiplexer_0_src0_data,                        --          .data
			src0_channel       => merlin_demultiplexer_0_src0_channel,                     --          .channel
			src0_startofpacket => merlin_demultiplexer_0_src0_startofpacket,               --          .startofpacket
			src0_endofpacket   => merlin_demultiplexer_0_src0_endofpacket,                 --          .endofpacket
			src1_ready         => merlin_demultiplexer_0_src1_ready,                       --      src1.ready
			src1_valid         => merlin_demultiplexer_0_src1_valid,                       --          .valid
			src1_data          => merlin_demultiplexer_0_src1_data,                        --          .data
			src1_channel       => merlin_demultiplexer_0_src1_channel,                     --          .channel
			src1_startofpacket => merlin_demultiplexer_0_src1_startofpacket,               --          .startofpacket
			src1_endofpacket   => merlin_demultiplexer_0_src1_endofpacket                  --          .endofpacket
		);

	multiplexer : component generic_spi_flash_altera_merlin_multiplexer_181_x7wtypi_cmp
		port map (
			clk                 => clk_clk,                              --       clk.clk
			reset               => rst_controller_reset_out_reset,       -- clk_reset.reset
			src_ready           => multiplexer_src_ready,                --       src.ready
			src_valid           => multiplexer_src_valid,                --          .valid
			src_data            => multiplexer_src_data,                 --          .data
			src_channel         => multiplexer_src_channel,              --          .channel
			src_startofpacket   => multiplexer_src_startofpacket,        --          .startofpacket
			src_endofpacket     => multiplexer_src_endofpacket,          --          .endofpacket
			sink0_ready         => xip_controller_cmd_pck_ready,         --     sink0.ready
			sink0_valid         => xip_controller_cmd_pck_valid,         --          .valid
			sink0_channel       => xip_controller_cmd_pck_channel,       --          .channel
			sink0_data          => xip_controller_cmd_pck_data,          --          .data
			sink0_startofpacket => xip_controller_cmd_pck_startofpacket, --          .startofpacket
			sink0_endofpacket   => xip_controller_cmd_pck_endofpacket,   --          .endofpacket
			sink1_ready         => csr_controller_cmd_pck_ready,         --     sink1.ready
			sink1_valid         => csr_controller_cmd_pck_valid,         --          .valid
			sink1_channel       => csr_controller_cmd_pck_channel,       --          .channel
			sink1_data          => csr_controller_cmd_pck_data,          --          .data
			sink1_startofpacket => csr_controller_cmd_pck_startofpacket, --          .startofpacket
			sink1_endofpacket   => csr_controller_cmd_pck_endofpacket    --          .endofpacket
		);

	serial_flash_inf_cmd_gen_inst : component intel_generic_serial_flash_interface_cmd_cmp
		port map (
			clk             => clk_clk,                                                     --            clk.clk
			reset           => rst_controller_reset_out_reset,                              --          reset.reset
			in_cmd_channel  => multiplexer_src_channel,                                     --     in_cmd_pck.channel
			in_cmd_eop      => multiplexer_src_endofpacket,                                 --               .endofpacket
			in_cmd_ready    => multiplexer_src_ready,                                       --               .ready
			in_cmd_sop      => multiplexer_src_startofpacket,                               --               .startofpacket
			in_cmd_data     => multiplexer_src_data,                                        --               .data
			in_cmd_valid    => multiplexer_src_valid,                                       --               .valid
			out_cmd_channel => serial_flash_inf_cmd_gen_inst_out_cmd_pck_channel,           --    out_cmd_pck.channel
			out_cmd_eop     => serial_flash_inf_cmd_gen_inst_out_cmd_pck_endofpacket,       --               .endofpacket
			out_cmd_ready   => serial_flash_inf_cmd_gen_inst_out_cmd_pck_ready,             --               .ready
			out_cmd_sop     => serial_flash_inf_cmd_gen_inst_out_cmd_pck_startofpacket,     --               .startofpacket
			out_cmd_data    => serial_flash_inf_cmd_gen_inst_out_cmd_pck_data,              --               .data
			out_cmd_valid   => serial_flash_inf_cmd_gen_inst_out_cmd_pck_valid,             --               .valid
			in_rsp_data     => qspi_inf_inst_out_rsp_pck_data,                              --     in_rsp_pck.data
			in_rsp_ready    => qspi_inf_inst_out_rsp_pck_ready,                             --               .ready
			in_rsp_valid    => qspi_inf_inst_out_rsp_pck_valid,                             --               .valid
			out_rsp_channel => serial_flash_inf_cmd_gen_inst_out_rsp_pck_channel,           --    out_rsp_pck.channel
			out_rsp_data    => serial_flash_inf_cmd_gen_inst_out_rsp_pck_data,              --               .data
			out_rsp_eop     => serial_flash_inf_cmd_gen_inst_out_rsp_pck_endofpacket,       --               .endofpacket
			out_rsp_ready   => serial_flash_inf_cmd_gen_inst_out_rsp_pck_ready,             --               .ready
			out_rsp_sop     => serial_flash_inf_cmd_gen_inst_out_rsp_pck_startofpacket,     --               .startofpacket
			out_rsp_valid   => serial_flash_inf_cmd_gen_inst_out_rsp_pck_valid,             --               .valid
			addr_bytes_csr  => csr_controller_addr_bytes_csr_addr_bytes_csr,                -- addr_bytes_csr.addr_bytes_csr
			addr_bytes_xip  => xip_controller_addr_bytes_xip_addr_bytes_xip,                -- addr_bytes_xip.addr_bytes_xip
			dummy_cycles    => serial_flash_inf_cmd_gen_inst_dummy_cycles_dummy_cycles,     --   dummy_cycles.dummy_cycles
			chip_select     => serial_flash_inf_cmd_gen_inst_chip_select_chip_select,       --    chip_select.chip_select
			require_rdata   => serial_flash_inf_cmd_gen_inst_require_rdata_require_rdata,   --  require_rdata.require_rdata
			op_type         => csr_controller_op_type_op_type,                              --        op_type.op_type
			wr_addr_type    => csr_controller_wr_addr_type_wr_addr_type,                    --   wr_addr_type.wr_addr_type
			wr_data_type    => csr_controller_wr_data_type_wr_data_type,                    --   wr_data_type.wr_data_type
			rd_addr_type    => csr_controller_rd_addr_type_rd_addr_type,                    --   rd_addr_type.rd_addr_type
			rd_data_type    => csr_controller_rd_data_type_rd_data_type,                    --   rd_data_type.rd_data_type
			op_num_lines    => serial_flash_inf_cmd_gen_inst_op_num_lines_op_num_lines,     --   op_num_lines.op_num_lines
			addr_num_lines  => serial_flash_inf_cmd_gen_inst_addr_num_lines_addr_num_lines, -- addr_num_lines.addr_num_lines
			data_num_lines  => serial_flash_inf_cmd_gen_inst_data_num_lines_data_num_lines, -- data_num_lines.data_num_lines
			xip_trans_type  => xip_controller_xip_trans_type_xip_trans_type                 -- xip_trans_type.xip_trans_type
		);

	qspi_inf_inst : component generic_spi_flash_intel_generic_serial_flash_interface_if_ctrl_181_kygc6zi_cmp
		generic map (
			DEV_FAMILY       => "Arria 10",
			NCS_LENGTH       => 3,
			DATA_LENGTH      => 4,
			MODE_LENGTH      => 4,
			ENABLE_SIM_MODEL => "false"
		)
		port map (
			clk                => clk_clk,                                                     --                clk.clk
			reset              => rst_controller_reset_out_reset,                              --              reset.reset
			in_cmd_channel     => serial_flash_inf_cmd_gen_inst_out_cmd_pck_channel,           --         in_cmd_pck.channel
			in_cmd_eop         => serial_flash_inf_cmd_gen_inst_out_cmd_pck_endofpacket,       --                   .endofpacket
			in_cmd_ready       => serial_flash_inf_cmd_gen_inst_out_cmd_pck_ready,             --                   .ready
			in_cmd_sop         => serial_flash_inf_cmd_gen_inst_out_cmd_pck_startofpacket,     --                   .startofpacket
			in_cmd_data        => serial_flash_inf_cmd_gen_inst_out_cmd_pck_data,              --                   .data
			in_cmd_valid       => serial_flash_inf_cmd_gen_inst_out_cmd_pck_valid,             --                   .valid
			out_rsp_data       => qspi_inf_inst_out_rsp_pck_data,                              --        out_rsp_pck.data
			out_rsp_valid      => qspi_inf_inst_out_rsp_pck_valid,                             --                   .valid
			out_rsp_ready      => qspi_inf_inst_out_rsp_pck_ready,                             --                   .ready
			dummy_cycles       => serial_flash_inf_cmd_gen_inst_dummy_cycles_dummy_cycles,     --       dummy_cycles.dummy_cycles
			chip_select        => serial_flash_inf_cmd_gen_inst_chip_select_chip_select,       --        chip_select.chip_select
			qspi_interface_en  => csr_controller_qspi_interface_en_qspi_interface_en,          --  qspi_interface_en.qspi_interface_en
			require_rdata      => serial_flash_inf_cmd_gen_inst_require_rdata_require_rdata,   --      require_rdata.require_rdata
			op_num_lines       => serial_flash_inf_cmd_gen_inst_op_num_lines_op_num_lines,     --       op_num_lines.op_num_lines
			addr_num_lines     => serial_flash_inf_cmd_gen_inst_addr_num_lines_addr_num_lines, --     addr_num_lines.addr_num_lines
			data_num_lines     => serial_flash_inf_cmd_gen_inst_data_num_lines_data_num_lines, --     data_num_lines.data_num_lines
			baud_rate_divisor  => csr_controller_baud_rate_divisor_baud_rate_divisor,          --  baud_rate_divisor.baud_rate_divisor
			cs_delay_setting   => csr_controller_cs_delay_setting_cs_delay_setting,            --   cs_delay_setting.cs_delay_setting
			read_capture_delay => csr_controller_read_capture_delay_read_capture_delay         -- read_capture_delay.read_capture_delay
		);

	rst_controller : component altera_reset_controller_cmp
		generic map (
			NUM_RESET_INPUTS          => 1,
			OUTPUT_RESET_SYNC_EDGES   => "deassert",
			SYNC_DEPTH                => 2,
			RESET_REQUEST_PRESENT     => 0,
			RESET_REQ_WAIT_TIME       => 1,
			MIN_RST_ASSERTION_TIME    => 3,
			RESET_REQ_EARLY_DSRT_TIME => 1,
			USE_RESET_REQUEST_IN0     => 0,
			USE_RESET_REQUEST_IN1     => 0,
			USE_RESET_REQUEST_IN2     => 0,
			USE_RESET_REQUEST_IN3     => 0,
			USE_RESET_REQUEST_IN4     => 0,
			USE_RESET_REQUEST_IN5     => 0,
			USE_RESET_REQUEST_IN6     => 0,
			USE_RESET_REQUEST_IN7     => 0,
			USE_RESET_REQUEST_IN8     => 0,
			USE_RESET_REQUEST_IN9     => 0,
			USE_RESET_REQUEST_IN10    => 0,
			USE_RESET_REQUEST_IN11    => 0,
			USE_RESET_REQUEST_IN12    => 0,
			USE_RESET_REQUEST_IN13    => 0,
			USE_RESET_REQUEST_IN14    => 0,
			USE_RESET_REQUEST_IN15    => 0,
			ADAPT_RESET_REQUEST       => 0
		)
		port map (
			reset_in0      => reset_reset,                    -- reset_in0.reset
			clk            => clk_clk,                        --       clk.clk
			reset_out      => rst_controller_reset_out_reset, -- reset_out.reset
			reset_req      => open,                           -- (terminated)
			reset_req_in0  => '0',                            -- (terminated)
			reset_in1      => '0',                            -- (terminated)
			reset_req_in1  => '0',                            -- (terminated)
			reset_in2      => '0',                            -- (terminated)
			reset_req_in2  => '0',                            -- (terminated)
			reset_in3      => '0',                            -- (terminated)
			reset_req_in3  => '0',                            -- (terminated)
			reset_in4      => '0',                            -- (terminated)
			reset_req_in4  => '0',                            -- (terminated)
			reset_in5      => '0',                            -- (terminated)
			reset_req_in5  => '0',                            -- (terminated)
			reset_in6      => '0',                            -- (terminated)
			reset_req_in6  => '0',                            -- (terminated)
			reset_in7      => '0',                            -- (terminated)
			reset_req_in7  => '0',                            -- (terminated)
			reset_in8      => '0',                            -- (terminated)
			reset_req_in8  => '0',                            -- (terminated)
			reset_in9      => '0',                            -- (terminated)
			reset_req_in9  => '0',                            -- (terminated)
			reset_in10     => '0',                            -- (terminated)
			reset_req_in10 => '0',                            -- (terminated)
			reset_in11     => '0',                            -- (terminated)
			reset_req_in11 => '0',                            -- (terminated)
			reset_in12     => '0',                            -- (terminated)
			reset_req_in12 => '0',                            -- (terminated)
			reset_in13     => '0',                            -- (terminated)
			reset_req_in13 => '0',                            -- (terminated)
			reset_in14     => '0',                            -- (terminated)
			reset_req_in14 => '0',                            -- (terminated)
			reset_in15     => '0',                            -- (terminated)
			reset_req_in15 => '0'                             -- (terminated)
		);

end architecture rtl; -- of generic_spi_flash_intel_generic_serial_flash_interface_top_181_zqmrk7a
